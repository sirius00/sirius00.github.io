[{"content":"基础篇 git add 添加指定文件夹及其目录下的文件 source目录下及子目录下所有文件，home目录下的所有.py文件\ngit source/* git home/*.py\ngit add 文件夹 git add 文件夹名\ngit commit 提交修改\ngit branch 分支管理\ngit branch : 创建分支 git check(switch) : 切换分支 创建一个新的分支同时切换到新创建的分支的话，可以通过 git checkout -b 删除本地分支: git branch -d \u0026lt;分支名\u0026gt;\n查看分支\ngit branch: 本地分支 git branch -r: 查看远程分支 git branch -a: 查看所有分支 git merge 分支与合并 流程:\n创建并切换到新的分支 git chenckout -b 提交新的修改到新建分支: git commit 切换到主分支, 并且提交修改 git checkout main git commit 合并新建分支到主分支(合并指定分支到当前分支) git merge 退出合并:\ngit rebase 新建并切换到新分支 git checkout -b 提交修改: git commit 切换回主分支再提交一次 再次切换到bugFix分支, rebase到main上 git rebase main git merge 和 git rebase 的区别? git merge 会让2个分支的提交按照提交时间进行排序，并且会把最新的2个commit合并成一个commit。最后的分支树呈现非线性的结构 git rebase 将dev的当前提交复制到master的最新提交之后，会形成一个线性的分支树\ngit pull使用详解 作用 取回远程主机某个分支的更新, 再与本地指定的分支合并 git pull = git fetch + git merge\n基本用法 git pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; 例如: git pull origin master:branchtest 后面的内容可以省略: git pull origin master 表示将远程的origin主机的master分支拉取过来和 本地的当前分支 进行合并\n高级篇: 在提交树上移动 分离HEAD git checkout \u0026lt;哈希值指定的提交记录名\u0026gt; git log: 查看提交记录的哈希值\n相对引用 使用方法:\n使用 ^ 向上移动一个提交记录 所以 main^ 相当于“main 的父节点” main^^ 是 main 的第二个父节点 切换到main的父节点: git checkout main^ 使用 ~ 向上移动多个提交记录, 如 ~3 可以使用 -f 选项让分支指向另一个提交: git branch -f main HEAD^3 git branch -f bugFix bugFix~3 撤销变更 git reset: 对远程分支无效 git reset HEAD~1 通过把分支记录回退几个提交记录来实现撤销改动。\ngit revert: 操作远程分支 git revert HEAD\n整理提交记录 git cherry-pick \u0026lt;提交号\u0026gt; \u0026hellip; 如果你想提交复制带当前位置(HEAD)下面的话, cherry-pick是最直接的方式 实例, 有一个仓库, 我们想将 side 分支的工作复制到 main 分支: git cherry-pick c2 c4\n交互式的rebase 使用带参数的 \u0026ndash;interactive 的rebase命令, 简写为 -i git rebase -i HEAD~3\n杂项 只取一个提交记录 使用cheery-pick或者rebase 命令\n提交技巧 TIPS git 查看历史提交记录 git reflog: 查看版本信息 git log: 查看版本详细信息\ngit 回退版本(版本穿梭) git reset \u0026lt;版本号\u0026gt;(上一步中, commit 后的遗传编码)\n合并冲突? 出现原因: 合并分支时, 两个分支在同一位置有两套完全不同的修改, git无法决定使用哪一个, 必须人为的决定新代码的内容 解决冲突:\n当远程分支比本地分支领先版本, 拉取远程到本地? 使用git pull命令拉取远程仓库新增内容到本地\ngit 查看config配置文件 config 配置指令 git config\n查看系统config git config \u0026ndash;system \u0026ndash;list\n查看当前用户的(global)配置 git config \u0026ndash;global \u0026ndash;list\n查看当前仓库的配置信息 git config \u0026ndash;local \u0026ndash;list\n","permalink":"https://github.com/sirius00/posts/tech/git%E7%9A%84%E4%BD%BF%E7%94%A8/","summary":"基础篇 git add 添加指定文件夹及其目录下的文件 source目录下及子目录下所有文件，home目录下的所有.py文件 git source/* git home/*.py git add 文件夹 git add 文件夹名 git","title":"Git的使用"},{"content":"创建数据库 create database 数据库名\n删除数据库 drop database 数据库名\nmysql数据类型 数值类型 类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 Bytes (-128，127) (0，255) 小整数值 SMALLINT 2 Bytes (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 Bytes (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT或INTEGER 4 Bytes (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 BIGINT 8 Bytes (-9,223,372,036,854,775,808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 FLOAT 4 Bytes (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度 浮点数值 DOUBLE 8 Bytes (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度 浮点数值 DECIMAL 对DECIMAL(M,D) ，如果M\u0026gt;D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值 日期/时间类型 类型 大小 ( bytes) 范围 格式 用途 DATE 3 1000-01-01/9999-12-31 YYYY-MM-DD 日期值 TIME 3 \u0026lsquo;-838:59:59\u0026rsquo;/\u0026lsquo;838:59:59\u0026rsquo; HH:MM:SS 时间值或持续时间 YEAR 1 1901/2155 YYYY 年份值 DATETIME 8 \u0026lsquo;1000-01-01 00:00:00\u0026rsquo; 到 \u0026lsquo;9999-12-31 23:59:59\u0026rsquo; YYYY-MM-DD hh:mm:ss 混合日期和时间值 TIMESTAMP 4 \u0026lsquo;1970-01-01 00:00:01\u0026rsquo; UTC 到 \u0026lsquo;2038-01-19 03:14:07\u0026rsquo; UTC结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 YYYY-MM-DD hh:mm:ss 混合日期和时间值，时间戳 字符串类型 类型 大小 用途 CHAR 0-255 bytes 定长字符串 VARCHAR 0-65535 bytes 变长字符串 TINYBLOB 0-255 bytes 不超过 255 个字符的二进制字符串 TINYTEXT 0-255 bytes 短文本字符串 BLOB 0-65 535 bytes 二进制形式的长文本数据 TEXT 0-65 535 bytes 长文本数据 MEDIUMBLOB 0-16 777 215 bytes 二进制形式的中等长度文本数据 MEDIUMTEXT 0-16 777 215 bytes 中等长度文本数据 LONGBLOB 0-4 294 967 295 bytes 二进制形式的极大文本数据 LONGTEXT 0-4 294 967 295 bytes 极大文本数据 ","permalink":"https://github.com/sirius00/posts/tech/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":"创建数据库 create database 数据库名 删除数据库 drop database 数据库名 mysql数据类型 数值类型 类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 Bytes (-128，127) (0","title":"mysql数据库"},{"content":"关于我\n| 职业: | 程序员 |\n","permalink":"https://github.com/sirius00/about/","summary":"关于我 | 职业: | 程序员 |","title":"🙋🏻‍♂️关于"},{"content":"","permalink":"https://github.com/sirius00/posts/read/read/","summary":"","title":"Read"},{"content":"","permalink":"https://github.com/sirius00/categories/","summary":"categories","title":"categories"}]